line #1 sub #1, error #120 - illegal operator
     1 00C000                              .INESPRG 1                ; 1x 16KB PRG code
line #2 sub #1, error #120 - illegal operator
     2 00C000                              .INESCHR 1                ; 1x  8KB CHR data
line #3 sub #1, error #120 - illegal operator
     3 00C000                              .INESMAP 0                ; mapper 0 = NROM, no bank swapping
line #4 sub #1, error #120 - illegal operator
     4 00C000                              .INESMIR 1                ; background mirroring
     5 00C000                                                     
     6 00C000                                                      ; ;;;;;;;;;;;;;;
     7 00C000                                                     
     8 00C000                                                     
line #9 sub #1, error #120 - illegal operator
     9 00C000                              .BANK  0               
start address $00C000
    10 00C000                              .ORG   $C000           
    11 00C000             RESET                                   
    12 00C000 78                           SEI                     ; disable IRQs
    13 00C001 D8                           CLD                     ; disable decimal mode
    14 00C002 A2 40 00                     LDX    #$40            
    15 00C005 8E 17 40                     STX    $4017            ; disable APU frame IRQ
    16 00C008 A2 FF 00                     LDX    #$FF            
    17 00C00B 9A                           TXS                     ; Set up stack
    18 00C00C E8                           INX                     ; now X = 0
    19 00C00D 8E 00 20                     STX    $2000            ; disable NMI
    20 00C010 8E 01 20                     STX    $2001            ; disable rendering
    21 00C013 8E 10 40                     STX    $4010            ; disable DMC IRQs
    22 00C016                                                     
    23 00C016             VBLANKWAIT1                              ; First wait for vblank to make sure PPU is ready
    24 00C016 2C 02 20                     BIT    $2002           
    25 00C019 10 FB                        BPL    VBLANKWAIT1     
    26 00C01B                                                     
    27 00C01B             CLRMEM                                  
    28 00C01B A9 00 00                     LDA    #$00            
    29 00C01E 85 00                        STA    $0000, X        
    30 00C020 85 00                        STA    $0100, X        
    31 00C022 85 00                        STA    $0300, X        
    32 00C024 85 00                        STA    $0400, X        
    33 00C026 85 00                        STA    $0500, X        
    34 00C028 85 00                        STA    $0600, X        
    35 00C02A 85 00                        STA    $0700, X        
    36 00C02C A9 FE 00                     LDA    #$FE            
    37 00C02F 85 00                        STA    $0200, X         ; move all sprites off screen
    38 00C031 E8                           INX                    
    39 00C032 D0 E7                        BNE    CLRMEM          
    40 00C034                                                     
    41 00C034             VBLANKWAIT2                              ; Second wait for vblank, PPU is ready after this
    42 00C034 2C 02 20                     BIT    $2002           
    43 00C037 10 FB                        BPL    VBLANKWAIT2     
    44 00C039                                                     
    45 00C039                                                     
    46 00C039                                                     
    47 00C039                                                      ; ************** NEW CODE ****************
    48 00C039             LOADPALETTES                            
    49 00C039 AD 02 20                     LDA    $2002            ; read PPU status to reset the high/low latch
    50 00C03C A9 3F 00                     LDA    #$3F            
    51 00C03F 8D 06 20                     STA    $2006            ; write the high byte of $3F00 address
    52 00C042 A9 00 00                     LDA    #$00            
    53 00C045 8D 06 20                     STA    $2006            ; write the low byte of $3F00 address
    54 00C048 A2 00 00                     LDX    #$00            
    55 00C04B             LOADPALETTESLOOP                        
line #56 sub #1, error #150 - symbol not found
    56 00C04B A5 00                        LDA    PALETTE, X       ; load palette byte
    57 00C04D 8D 07 20                     STA    $2007            ; write to PPU
    58 00C050 E8                           INX                     ; set index to next byte
    59 00C051 E0 20 00                     CPX    #$20            
    60 00C054 D0 F5                        BNE    LOADPALETTESLOOP ; if x = $20, 32 bytes copied, all done
    61 00C056                                                     
    62 00C056             LOADSPRITES                             
    63 00C056 A2 00 00                     LDX    #$00            
    64 00C059             LOADSPRITESLOOP                         
line #65 sub #1, error #150 - symbol not found
    65 00C059 A5 00                        LDA    SPRITES, X      
    66 00C05B 85 00                        STA    $0200, X        
    67 00C05D E8                           INX                    
    68 00C05E EC 73 C1                     CPX    SPRITELEN       
    69 00C061 D0 F6                        BNE    LOADSPRITESLOOP 
    70 00C063                                                     
    71 00C063 A9 80 00                     LDA    #%10000000       ; enable NMI, sprites from Pattern Table 0
    72 00C066 8D 00 20                     STA    $2000           
    73 00C069                                                     
    74 00C069 A9 10 00                     LDA    #%00010000       ; enable sprites
    75 00C06C 8D 01 20                     STA    $2001           
    76 00C06F                                                     
    77 00C06F             FOREVER                                 
    78 00C06F 4C 6F C0                     JMP    FOREVER          ; jump back to Forever, infinite loop
    79 00C072                                                     
    80 00C072                                                     
    81 00C072             BTNDWN                                  
    82 00C072 AD 00 02                     LDA    $0200           
    83 00C075 18                           CLC                    
    84 00C076 65 05                        ADC    CHARSPEED       
    85 00C078 8D 00 02                     STA    $0200           
    86 00C07B AD 04 02                     LDA    $0204           
    87 00C07E 18                           CLC                    
    88 00C07F 65 05                        ADC    CHARSPEED       
    89 00C081 8D 04 02                     STA    $0204           
    90 00C084 AD 08 02                     LDA    $0208           
    91 00C087 18                           CLC                    
    92 00C088 65 05                        ADC    CHARSPEED       
    93 00C08A 8D 08 02                     STA    $0208           
    94 00C08D AD 0C 02                     LDA    $020C           
    95 00C090 18                           CLC                    
    96 00C091 65 05                        ADC    CHARSPEED       
    97 00C093 8D 0C 02                     STA    $020C           
    98 00C096 4C F8 C0                     JMP    UPDATESCREEN    
    99 00C099                                                     
   100 00C099             BTNRIGHT                                
   101 00C099 AD 03 02                     LDA    $0203           
   102 00C09C 18                           CLC                    
   103 00C09D 65 05                        ADC    CHARSPEED       
   104 00C09F 8D 03 02                     STA    $0203           
   105 00C0A2 AD 07 02                     LDA    $0207           
   106 00C0A5 18                           CLC                    
   107 00C0A6 65 05                        ADC    CHARSPEED       
   108 00C0A8 8D 07 02                     STA    $0207           
   109 00C0AB AD 0B 02                     LDA    $020B           
   110 00C0AE 18                           CLC                    
   111 00C0AF 65 05                        ADC    CHARSPEED       
   112 00C0B1 8D 0B 02                     STA    $020B           
   113 00C0B4 AD 0F 02                     LDA    $020F           
   114 00C0B7 18                           CLC                    
   115 00C0B8 65 05                        ADC    CHARSPEED       
   116 00C0BA 8D 0F 02                     STA    $020F           
   117 00C0BD 4C F8 C0                     JMP    UPDATESCREEN    
   118 00C0C0                                                     
   119 00C0C0                                                     
   120 00C0C0             NMI                                     
   121 00C0C0                                                      ; First we check the controller state
   122 00C0C0 A9 01 00                     LDA    #$01            
   123 00C0C3                                                     
   124 00C0C3 8D 16 40                     STA    $4016           
   125 00C0C6                                                     
   126 00C0C6 A9 00 00                     LDA    #$00            
   127 00C0C9                                                     
   128 00C0C9 8D 16 40                     STA    $4016            ; tell both the controllers to latch buttons
   129 00C0CC                                                     
   130 00C0CC                                                     
   131 00C0CC AD 16 40                     LDA    $4016            ; player 1 - A
   132 00C0CF                                                     
   133 00C0CF AD 16 40                     LDA    $4016            ; player 1 - B
   134 00C0D2                                                     
   135 00C0D2 AD 16 40                     LDA    $4016            ; player 1 - Select
   136 00C0D5                                                     
   137 00C0D5 AD 16 40                     LDA    $4016            ; player 1 - Start
   138 00C0D8                                                     
   139 00C0D8 AD 16 40                     LDA    $4016            ; player 1 - Up
   140 00C0DB 29 01 00                     AND    #%00000001      
   141 00C0DE D0 25                        BNE    BTNUP           
   142 00C0E0 AD 16 40                     LDA    $4016            ; player 1 - Down
   143 00C0E3 29 01 00                     AND    #%00000001      
   144 00C0E6 D0 8A                        BNE    BTNDWN          
   145 00C0E8                                                     
   146 00C0E8 AD 16 40                     LDA    $4016            ; player 1 - Left
   147 00C0EB 29 01 00                     AND    #%00000001      
   148 00C0EE D0 3C                        BNE    BTNLEFT         
   149 00C0F0                                                     
   150 00C0F0 AD 16 40                     LDA    $4016            ; player 1 - Right
   151 00C0F3 29 01 00                     AND    #%00000001      
   152 00C0F6 D0 A1                        BNE    BTNRIGHT        
   153 00C0F8                                                     
   154 00C0F8             UPDATESCREEN                            
   155 00C0F8 A9 00 00                     LDA    #$00            
   156 00C0FB 8D 03 20                     STA    $2003            ; set the low byte (00) of the RAM address
   157 00C0FE A9 02 00                     LDA    #$02            
   158 00C101 8D 14 40                     STA    $4014            ; set the high byte (02) of the RAM address, start the transfer
   159 00C104                                                     
   160 00C104 40                           RTI                     ; return from interrupt
   161 00C105                                                     
   162 00C105             BTNUP                                   
   163 00C105 AD 00 02                     LDA    $0200           
   164 00C108 38                           SEC                    
   165 00C109 E5 05                        SBC    CHARSPEED       
   166 00C10B 8D 00 02                     STA    $0200           
   167 00C10E AD 04 02                     LDA    $0204           
   168 00C111 38                           SEC                    
   169 00C112 E5 05                        SBC    CHARSPEED       
   170 00C114 8D 04 02                     STA    $0204           
   171 00C117 AD 08 02                     LDA    $0208           
   172 00C11A 38                           SEC                    
   173 00C11B E5 05                        SBC    CHARSPEED       
   174 00C11D 8D 08 02                     STA    $0208           
   175 00C120 AD 0C 02                     LDA    $020C           
   176 00C123 38                           SEC                    
   177 00C124 E5 05                        SBC    CHARSPEED       
   178 00C126 8D 0C 02                     STA    $020C           
   179 00C129 4C F8 C0                     JMP    UPDATESCREEN    
   180 00C12C                                                     
   181 00C12C             BTNLEFT                                 
   182 00C12C AD 03 02                     LDA    $0203           
   183 00C12F 38                           SEC                    
   184 00C130 E5 05                        SBC    CHARSPEED       
   185 00C132 8D 03 02                     STA    $0203           
   186 00C135 AD 07 02                     LDA    $0207           
   187 00C138 38                           SEC                    
   188 00C139 E5 05                        SBC    CHARSPEED       
   189 00C13B 8D 07 02                     STA    $0207           
   190 00C13E AD 0B 02                     LDA    $020B           
   191 00C141 38                           SEC                    
   192 00C142 E5 05                        SBC    CHARSPEED       
   193 00C144 8D 0B 02                     STA    $020B           
   194 00C147 AD 0F 02                     LDA    $020F           
   195 00C14A 38                           SEC                    
   196 00C14B E5 05                        SBC    CHARSPEED       
   197 00C14D 8D 0F 02                     STA    $020F           
   198 00C150 4C F8 C0                     JMP    UPDATESCREEN    
   199 00C153                                                     
   200 00C153                                                      ; ;;;;;;;;;;;;;
   201 00C153                                                     
   202 00C153                                                     
   203 00C153                                                     
line #204 sub #1, error #120 - illegal operator
   204 00C153                              .BANK  1               
error, redefined start address.
start address $00C000
   205 00C153                              .ORG   $E000           
   206 00C153             PALETTE                                 
   207 00C153 [000010]                     .DB    $0F,$31,$32,$33,$0F,$35,$36,$37,$0F,$39,$3A,$3B,$0F,$3D,$3E,$0F
   208 00C163 [000010]                     .DB    $0F,$1C,$15,$14,$0F,$02,$38,$3C,$0F,$1C,$15,$14,$0F,$02,$38,$3C
   209 00C173             SPRITELEN                               
   210 00C173 10                           .DB    $10             
   211 00C174             SPRITES                                 
   212 00C174                                                      ; we store sprite data here. Format is as follows
   213 00C174                                                      ; vert coord, tile no, attributes, horiz coord
   214 00C174 80 32 00 80                  .DB    $80, $32, $00, $80
   215 00C178 80 33 00 88                  .DB    $80, $33, $00, $88
   216 00C17C 88 34 00 80                  .DB    $88, $34, $00, $80
   217 00C180 88 35 00 88                  .DB    $88, $35, $00, $88
   218 00C184                                                     
   219 00C184 [=000005]   CHARSPEED        EQU    $05             
   220 00C184                                                     
   221 00C184                                                     
error, redefined start address.
start address $00C000
   222 00C184                              .ORG   $FFFA            ; first of the three vectors starts here
   223 00C184 C0 C0                        .DW    NMI              ; when an NMI happens (once per frame if enabled) the
   224 00C186                                                      ; processor will jump to the label NMI:
   225 00C186 00 C0                        .DW    RESET            ; when the processor first turns on or is reset, it will jump
   226 00C188                                                      ; to the label RESET:
   227 00C188 00 00                        .DW    0                ; external interrupt IRQ is not used in this tutorial
   228 00C18A                                                     
   229 00C18A                                                     
   230 00C18A                                                      ; ;;;;;;;;;;;;;
   231 00C18A                                                     
   232 00C18A                                                     
line #233 sub #1, error #120 - illegal operator
   233 00C18A                              .BANK  2               
error, redefined start address.
start address $00C000
   234 00C18A                              .ORG   $0000           
   235 00C18A [002000]                     .INCBIN "mario.chr"      ; includes 8KB graphics file from SMB1

00C000-00E18A
errors=9
lines=235
statements=235
symbols=19/40960
modules=1/32768
source=7442/2097152
